// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;
using System.Text.Json.Serialization;
using MyOrg.Models.JsonSystemText;

namespace MyOrg.Models.JsonSystemText
{
    [JsonPolymorphic]
    [JsonDerivedType(typeof(MyDTO2))]
    public partial class Pair_2_Int64_String : DTOMaker.Runtime.JsonSystemText.EntityBase, IPair<Int64, String>, IEquatable<Pair_2_Int64_String>
    {
        // Derived entities: 1
        // - MyDTO2

        protected override int OnGetEntityId() => 10362320;

        private static Pair_2_Int64_String CreateEmpty()
        {
            var empty = new Pair_2_Int64_String();
            empty.Freeze();
            return empty;
        }
        private static readonly Pair_2_Int64_String _empty = CreateEmpty();
        public static new Pair_2_Int64_String Empty => _empty;

        public new static Pair_2_Int64_String CreateFrom(Pair_2_Int64_String source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.JsonSystemText.MyDTO2 source2 => new MyOrg.Models.JsonSystemText.MyDTO2(source2),
                _ => new MyOrg.Models.JsonSystemText.Pair_2_Int64_String(source)
            };
        }

        public new static Pair_2_Int64_String CreateFrom(MyOrg.Models.IPair<Int64, String> source)
        {
            if (source is Pair_2_Int64_String concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyDTO2 source2 => new MyOrg.Models.JsonSystemText.MyDTO2(source2),
                _ => new MyOrg.Models.JsonSystemText.Pair_2_Int64_String(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IEntityBase OnPartCopy() => new Pair_2_Int64_String(this);

        public Pair_2_Int64_String() { }
        public Pair_2_Int64_String(IPair<Int64, String> source) : base(source)
        {
            _Item1 = source.Item1;
            _Item2 = source.Item2;
        }
        public Pair_2_Int64_String(Pair_2_Int64_String source) : base(source)
        {
            _Item1 = source._Item1;
            _Item2 = source._Item2;
        }

        [JsonIgnore]
        private Int64 _Item1 = default;
        public Int64 Item1
        {
            get => _Item1;
            set => _Item1 = IfNotFrozen(value);
        }

        [JsonIgnore]
        private string _Item2 = string.Empty;
        public string Item2
        {
            get => _Item2;
            set => _Item2 = IfNotFrozen(value);
        }


        public bool Equals(Pair_2_Int64_String? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Item1 != other.Item1) return false;
            if (_Item2 != other.Item2) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Pair_2_Int64_String other && Equals(other);
        public static bool operator ==(Pair_2_Int64_String? left, Pair_2_Int64_String? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Pair_2_Int64_String? left, Pair_2_Int64_String? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Item1);
            result.Add(_Item2);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
