// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;

namespace MyOrg.Models.JsonSystemText
{
    public partial class MyDTO : DTOMaker.Runtime.JsonSystemText.EntityBase, IMyDTO, IEquatable<MyDTO>
    {
        // Derived entities: 0

        protected override int OnGetEntityId() => 1;

        private static MyDTO CreateEmpty()
        {
            var empty = new MyDTO();
            empty.Freeze();
            return empty;
        }
        private static readonly MyDTO _empty = CreateEmpty();
        public static new MyDTO Empty => _empty;

        public new static MyDTO CreateFrom(MyDTO source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.JsonSystemText.MyDTO(source)
            };
        }

        public new static MyDTO CreateFrom(MyOrg.Models.IMyDTO source)
        {
            if (source is MyDTO concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.JsonSystemText.MyDTO(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Other1?.Freeze();
        }

        protected override IEntityBase OnPartCopy() => new MyDTO(this);

        public MyDTO() { }
        public MyDTO(IMyDTO source) : base(source)
        {
            _Other1 = source.Other1 is null ? null : MyOrg.Models.JsonSystemText.Other.CreateFrom(source.Other1);
            _Field1 = source.Field1.ToByteArray();
            _Field2 = source.Field2 is null ? null : source.Field2.ToByteArray();
        }
        public MyDTO(MyDTO source) : base(source)
        {
            _Other1 = source._Other1;
            _Field1 = source._Field1;
            _Field2 = source._Field2;
        }

        private MyOrg.Models.JsonSystemText.Other? _Other1;
        public MyOrg.Models.JsonSystemText.Other? Other1
        {
            get => _Other1;
            set => _Other1 = IfNotFrozen(value);
        }
        MyOrg.Models.IOther? IMyDTO.Other1
        {
            get => _Other1;
            set => _Other1 = IfNotFrozen(value is null ? null : MyOrg.Models.JsonSystemText.Other.CreateFrom(value));
        }

        private byte[] _Field1 = Array.Empty<byte>();
        public byte[] Field1
        {
            get => _Field1;
            set => _Field1 = IfNotFrozen(value);
        }
        Octets IMyDTO.Field1
        {
            get => _Field1.Length == 0 ? Octets.Empty : new Octets(_Field1);
            set => _Field1 = IfNotFrozen(value.ToByteArray());
        }

        private byte[]? _Field2;
        public byte[]? Field2
        {
            get => _Field2;
            set => _Field2 = IfNotFrozen(value);
        }
        Octets? IMyDTO.Field2
        {
            get => _Field2 is null ? null : _Field2.Length == 0 ? Octets.Empty : new Octets(_Field2);
            set => _Field2 = IfNotFrozen(value is null ? null : value.ToByteArray());
        }


        public bool Equals(MyDTO? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Other1 != other.Other1) return false;
            if (!BinaryValuesAreEqual(_Field1, other._Field1)) return false;
            if (!BinaryValuesAreEqual(_Field2, other._Field2)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO other && Equals(other);
        public static bool operator ==(MyDTO? left, MyDTO? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO? left, MyDTO? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Other1);
            ReadOnlySpan<byte> span_Field1 = _Field1;
            result.Add(span_Field1.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(span_Field1);
#else
            for (int i = 0; i < span_Field1.Length; i++)
            {
                result.Add(span_Field1[i]);
            }
#endif
            if (_Field2 is not null)
            {
                ReadOnlySpan<byte> span_Field2 = _Field2;
                result.Add(span_Field2.Length);
#if NET8_0_OR_GREATER
                result.AddBytes(span_Field2);
#else
                for (int i = 0; i < span_Field2.Length; i++)
                {
                    result.Add(span_Field2[i]);
                }
#endif
            }
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
