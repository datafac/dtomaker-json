// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;

namespace MyOrg.Models.JsonSystemText
{
    public partial class MyDTO3 : DTOMaker.Runtime.JsonSystemText.EntityBase, IMyDTO3, IEquatable<MyDTO3>
    {
        // Derived entities: 0

        protected override int OnGetEntityId() => 3;

        private static MyDTO3 CreateEmpty()
        {
            var empty = new MyDTO3();
            empty.Freeze();
            return empty;
        }
        private static readonly MyDTO3 _empty = CreateEmpty();
        public static new MyDTO3 Empty => _empty;

        public new static MyDTO3 CreateFrom(MyDTO3 source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.JsonSystemText.MyDTO3(source)
            };
        }

        public new static MyDTO3 CreateFrom(MyOrg.Models.IMyDTO3 source)
        {
            if (source is MyDTO3 concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.JsonSystemText.MyDTO3(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Pair?.Freeze();
        }

        protected override IEntityBase OnPartCopy() => new MyDTO3(this);

        public MyDTO3() { }
        public MyDTO3(IMyDTO3 source) : base(source)
        {
            _Id = source.Id;
            _Pair = source.Pair is null ? null : MyOrg.Models.JsonSystemText.Pair_2_Int64_String.CreateFrom(source.Pair);
        }
        public MyDTO3(MyDTO3 source) : base(source)
        {
            _Id = source._Id;
            _Pair = source._Pair;
        }

        private Int32 _Id = default;
        public Int32 Id
        {
            get => _Id;
            set => _Id = IfNotFrozen(value);
        }

        private MyOrg.Models.JsonSystemText.Pair_2_Int64_String? _Pair;
        public MyOrg.Models.JsonSystemText.Pair_2_Int64_String? Pair
        {
            get => _Pair;
            set => _Pair = IfNotFrozen(value);
        }
        MyOrg.Models.IPair<Int64, String>? IMyDTO3.Pair
        {
            get => _Pair;
            set => _Pair = IfNotFrozen(value is null ? null : MyOrg.Models.JsonSystemText.Pair_2_Int64_String.CreateFrom(value));
        }


        public bool Equals(MyDTO3? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Id != other.Id) return false;
            if (_Pair != other.Pair) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO3 other && Equals(other);
        public static bool operator ==(MyDTO3? left, MyDTO3? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO3? left, MyDTO3? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Id);
            result.Add(_Pair);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
