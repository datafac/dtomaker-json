// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;

namespace MyOrg.Models.JsonSystemText
{
    public partial class Tree_2_String_Octets : DTOMaker.Runtime.JsonSystemText.EntityBase, ITree<String, Octets>, IEquatable<Tree_2_String_Octets>
    {
        // Derived entities: 1
        // - MyTree

        protected override int OnGetEntityId() => 10369618;

        private static Tree_2_String_Octets CreateEmpty()
        {
            var empty = new Tree_2_String_Octets();
            empty.Freeze();
            return empty;
        }
        private static readonly Tree_2_String_Octets _empty = CreateEmpty();
        public static new Tree_2_String_Octets Empty => _empty;

        public new static Tree_2_String_Octets CreateFrom(Tree_2_String_Octets source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.JsonSystemText.MyTree source2 => new MyOrg.Models.JsonSystemText.MyTree(source2),
                _ => new MyOrg.Models.JsonSystemText.Tree_2_String_Octets(source)
            };
        }

        public new static Tree_2_String_Octets CreateFrom(MyOrg.Models.ITree<String, Octets> source)
        {
            if (source is Tree_2_String_Octets concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyTree source2 => new MyOrg.Models.JsonSystemText.MyTree(source2),
                _ => new MyOrg.Models.JsonSystemText.Tree_2_String_Octets(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Left?.Freeze();
            _Right?.Freeze();
        }

        protected override IEntityBase OnPartCopy() => new Tree_2_String_Octets(this);

        public Tree_2_String_Octets() { }
        public Tree_2_String_Octets(ITree<String, Octets> source) : base(source)
        {
            _Count = source.Count;
            _Key = source.Key;
            _Value = source.Value.ToByteArray();
            _Left = source.Left is null ? null : MyOrg.Models.JsonSystemText.Tree_2_String_Octets.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.JsonSystemText.Tree_2_String_Octets.CreateFrom(source.Right);
        }
        public Tree_2_String_Octets(Tree_2_String_Octets source) : base(source)
        {
            _Count = source._Count;
            _Key = source._Key;
            _Value = source._Value;
            _Left = source._Left;
            _Right = source._Right;
        }

        private Int32 _Count = default;
        public Int32 Count
        {
            get => _Count;
            set => _Count = IfNotFrozen(value);
        }

        private string _Key = string.Empty;
        public string Key
        {
            get => _Key;
            set => _Key = IfNotFrozen(value);
        }

        private byte[] _Value = Array.Empty<byte>();
        public byte[] Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(value);
        }
        Octets ITree<String, Octets>.Value
        {
            get => _Value.Length == 0 ? Octets.Empty : new Octets(_Value);
            set => _Value = IfNotFrozen(value.ToByteArray());
        }

        private MyOrg.Models.JsonSystemText.Tree_2_String_Octets? _Left;
        public MyOrg.Models.JsonSystemText.Tree_2_String_Octets? Left
        {
            get => _Left;
            set => _Left = IfNotFrozen(value);
        }
        MyOrg.Models.ITree<String, Octets>? ITree<String, Octets>.Left
        {
            get => _Left;
            set => _Left = IfNotFrozen(value is null ? null : MyOrg.Models.JsonSystemText.Tree_2_String_Octets.CreateFrom(value));
        }

        private MyOrg.Models.JsonSystemText.Tree_2_String_Octets? _Right;
        public MyOrg.Models.JsonSystemText.Tree_2_String_Octets? Right
        {
            get => _Right;
            set => _Right = IfNotFrozen(value);
        }
        MyOrg.Models.ITree<String, Octets>? ITree<String, Octets>.Right
        {
            get => _Right;
            set => _Right = IfNotFrozen(value is null ? null : MyOrg.Models.JsonSystemText.Tree_2_String_Octets.CreateFrom(value));
        }


        public bool Equals(Tree_2_String_Octets? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Count != other.Count) return false;
            if (_Key != other.Key) return false;
            if (!BinaryValuesAreEqual(_Value, other._Value)) return false;
            if (_Left != other.Left) return false;
            if (_Right != other.Right) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Tree_2_String_Octets other && Equals(other);
        public static bool operator ==(Tree_2_String_Octets? left, Tree_2_String_Octets? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree_2_String_Octets? left, Tree_2_String_Octets? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Count);
            result.Add(_Key);
            ReadOnlySpan<byte> span_Value = _Value;
            result.Add(span_Value.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(span_Value);
#else
            for (int i = 0; i < span_Value.Length; i++)
            {
                result.Add(span_Value[i]);
            }
#endif
            result.Add(_Left);
            result.Add(_Right);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
