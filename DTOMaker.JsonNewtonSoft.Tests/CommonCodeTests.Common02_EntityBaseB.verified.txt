// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;

namespace MyOrg.Models.JsonSystemText
{
    public partial class MyBase : DTOMaker.Runtime.JsonSystemText.EntityBase, IMyBase, IEquatable<MyBase>
    {
        // Derived entities: 1
        // - MyDTO

        protected override int OnGetEntityId() => 2;

        private static MyBase CreateEmpty()
        {
            var empty = new MyBase();
            empty.Freeze();
            return empty;
        }
        private static readonly MyBase _empty = CreateEmpty();
        public static new MyBase Empty => _empty;

        public new static MyBase CreateFrom(MyBase source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.JsonSystemText.MyDTO source2 => new MyOrg.Models.JsonSystemText.MyDTO(source2),
                _ => new MyOrg.Models.JsonSystemText.MyBase(source)
            };
        }

        public new static MyBase CreateFrom(MyOrg.Models.IMyBase source)
        {
            if (source is MyBase concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyDTO source2 => new MyOrg.Models.JsonSystemText.MyDTO(source2),
                _ => new MyOrg.Models.JsonSystemText.MyBase(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IEntityBase OnPartCopy() => new MyBase(this);

        public MyBase() { }
        public MyBase(IMyBase source) : base(source)
        {
        }
        public MyBase(MyBase source) : base(source)
        {
        }


        public bool Equals(MyBase? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyBase other && Equals(other);
        public static bool operator ==(MyBase? left, MyBase? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyBase? left, MyBase? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
