// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;

namespace MyOrg.Models.JsonSystemText
{
    public partial class Polygon : DTOMaker.Runtime.JsonSystemText.EntityBase, IPolygon, IEquatable<Polygon>
    {
        // Derived entities: 6
        // - Equilateral
        // - Quadrilateral
        // - Rectangle
        // - RightTriangle
        // - Square
        // - Triangle

        protected override int OnGetEntityId() => 1;

        private static Polygon CreateEmpty()
        {
            var empty = new Polygon();
            empty.Freeze();
            return empty;
        }
        private static readonly Polygon _empty = CreateEmpty();
        public static new Polygon Empty => _empty;

        public new static Polygon CreateFrom(Polygon source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.JsonSystemText.Equilateral source2 => new MyOrg.Models.JsonSystemText.Equilateral(source2),
                MyOrg.Models.JsonSystemText.Rectangle source2 => new MyOrg.Models.JsonSystemText.Rectangle(source2),
                MyOrg.Models.JsonSystemText.RightTriangle source2 => new MyOrg.Models.JsonSystemText.RightTriangle(source2),
                MyOrg.Models.JsonSystemText.Square source2 => new MyOrg.Models.JsonSystemText.Square(source2),
                MyOrg.Models.JsonSystemText.Quadrilateral source2 => new MyOrg.Models.JsonSystemText.Quadrilateral(source2),
                MyOrg.Models.JsonSystemText.Triangle source2 => new MyOrg.Models.JsonSystemText.Triangle(source2),
                _ => new MyOrg.Models.JsonSystemText.Polygon(source)
            };
        }

        public new static Polygon CreateFrom(MyOrg.Models.IPolygon source)
        {
            if (source is Polygon concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IEquilateral source2 => new MyOrg.Models.JsonSystemText.Equilateral(source2),
                MyOrg.Models.IRectangle source2 => new MyOrg.Models.JsonSystemText.Rectangle(source2),
                MyOrg.Models.IRightTriangle source2 => new MyOrg.Models.JsonSystemText.RightTriangle(source2),
                MyOrg.Models.ISquare source2 => new MyOrg.Models.JsonSystemText.Square(source2),
                MyOrg.Models.IQuadrilateral source2 => new MyOrg.Models.JsonSystemText.Quadrilateral(source2),
                MyOrg.Models.ITriangle source2 => new MyOrg.Models.JsonSystemText.Triangle(source2),
                _ => new MyOrg.Models.JsonSystemText.Polygon(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IEntityBase OnPartCopy() => new Polygon(this);

        public Polygon() { }
        public Polygon(IPolygon source) : base(source)
        {
        }
        public Polygon(Polygon source) : base(source)
        {
        }


        public bool Equals(Polygon? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Polygon other && Equals(other);
        public static bool operator ==(Polygon? left, Polygon? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Polygon? left, Polygon? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
