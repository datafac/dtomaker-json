// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;

namespace MyOrg.Models.JsonSystemText
{
    public partial class Tree : DTOMaker.Runtime.JsonSystemText.EntityBase, ITree, IEquatable<Tree>
    {
        // Derived entities: 0

        protected override int OnGetEntityId() => 7;

        private static Tree CreateEmpty()
        {
            var empty = new Tree();
            empty.Freeze();
            return empty;
        }
        private static readonly Tree _empty = CreateEmpty();
        public static new Tree Empty => _empty;

        public new static Tree CreateFrom(Tree source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.JsonSystemText.Tree(source)
            };
        }

        public new static Tree CreateFrom(MyOrg.Models.ITree source)
        {
            if (source is Tree concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.JsonSystemText.Tree(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Left?.Freeze();
            _Right?.Freeze();
            _Node?.Freeze();
        }

        protected override IEntityBase OnPartCopy() => new Tree(this);

        public Tree() { }
        public Tree(ITree source) : base(source)
        {
            _Left = source.Left is null ? null : MyOrg.Models.JsonSystemText.Tree.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.JsonSystemText.Tree.CreateFrom(source.Right);
            _Node = source.Node is null ? null : MyOrg.Models.JsonSystemText.Node.CreateFrom(source.Node);
        }
        public Tree(Tree source) : base(source)
        {
            _Left = source._Left;
            _Right = source._Right;
            _Node = source._Node;
        }

        private MyOrg.Models.JsonSystemText.Tree? _Left;
        public MyOrg.Models.JsonSystemText.Tree? Left
        {
            get => _Left;
            set => _Left = IfNotFrozen(value);
        }
        MyOrg.Models.ITree? ITree.Left
        {
            get => _Left;
            set => _Left = IfNotFrozen(value is null ? null : MyOrg.Models.JsonSystemText.Tree.CreateFrom(value));
        }

        private MyOrg.Models.JsonSystemText.Tree? _Right;
        public MyOrg.Models.JsonSystemText.Tree? Right
        {
            get => _Right;
            set => _Right = IfNotFrozen(value);
        }
        MyOrg.Models.ITree? ITree.Right
        {
            get => _Right;
            set => _Right = IfNotFrozen(value is null ? null : MyOrg.Models.JsonSystemText.Tree.CreateFrom(value));
        }

        private MyOrg.Models.JsonSystemText.Node? _Node;
        public MyOrg.Models.JsonSystemText.Node? Node
        {
            get => _Node;
            set => _Node = IfNotFrozen(value);
        }
        MyOrg.Models.INode? ITree.Node
        {
            get => _Node;
            set => _Node = IfNotFrozen(value is null ? null : MyOrg.Models.JsonSystemText.Node.CreateFrom(value));
        }


        public bool Equals(Tree? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Left != other.Left) return false;
            if (_Right != other.Right) return false;
            if (_Node != other.Node) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Tree other && Equals(other);
        public static bool operator ==(Tree? left, Tree? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree? left, Tree? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Left);
            result.Add(_Right);
            result.Add(_Node);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
