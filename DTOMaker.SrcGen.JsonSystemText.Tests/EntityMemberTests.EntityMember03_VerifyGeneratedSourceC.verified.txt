// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;
using System.Text.Json.Serialization;
using MyOrg.DomainC.JsonSystemText;

namespace MyOrg.DomainC.JsonSystemText
{
    public partial class MyDTO2 : DTOMaker.Runtime.JsonSystemText.EntityBase, IMyDTO2, IEquatable<MyDTO2>
    {
        // Derived entities: 0

        protected override int OnGetEntityId() => 3;

        private static MyDTO2 CreateEmpty()
        {
            var empty = new MyDTO2();
            empty.Freeze();
            return empty;
        }
        private static readonly MyDTO2 _empty = CreateEmpty();
        public static new MyDTO2 Empty => _empty;

        public new static MyDTO2 CreateFrom(MyDTO2 source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.DomainC.JsonSystemText.MyDTO2(source)
            };
        }

        public new static MyDTO2 CreateFrom(MyOrg.DomainC.IMyDTO2 source)
        {
            if (source is MyDTO2 concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.DomainC.JsonSystemText.MyDTO2(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Member1?.Freeze();
            _Member2.Freeze();
        }

        protected override IEntityBase OnPartCopy() => new MyDTO2(this);

        public MyDTO2() { }
        public MyDTO2(IMyDTO2 source) : base(source)
        {
            _Member1 = source.Member1 is null ? null : MyOrg.DomainA.JsonSystemText.MyDTO1.CreateFrom(source.Member1);
            _Member2 = MyOrg.DomainB.JsonSystemText.MyDTO1.CreateFrom(source.Member2);
        }
        public MyDTO2(MyDTO2 source) : base(source)
        {
            _Member1 = source._Member1;
            _Member2 = source._Member2;
        }

        [JsonIgnore]
        private MyOrg.DomainA.JsonSystemText.MyDTO1? _Member1;
        public MyOrg.DomainA.JsonSystemText.MyDTO1? Member1
        {
            get => _Member1;
            set => _Member1 = IfNotFrozen(value);
        }
        MyOrg.DomainA.IMyDTO1? IMyDTO2.Member1
        {
            get => _Member1;
            set => _Member1 = IfNotFrozen(value is null ? null : MyOrg.DomainA.JsonSystemText.MyDTO1.CreateFrom(value));
        }

        [JsonIgnore]
        private MyOrg.DomainB.JsonSystemText.MyDTO1 _Member2 = MyOrg.DomainB.JsonSystemText.MyDTO1.Empty;
        public MyOrg.DomainB.JsonSystemText.MyDTO1 Member2
        {
            get => _Member2;
            set => _Member2 = IfNotFrozen(value);
        }
        MyOrg.DomainB.IMyDTO1 IMyDTO2.Member2
        {
            get => _Member2;
            set => _Member2 = IfNotFrozen(MyOrg.DomainB.JsonSystemText.MyDTO1.CreateFrom(value));
        }


        public bool Equals(MyDTO2? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Member1 != other.Member1) return false;
            if (_Member2 != other.Member2) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO2 other && Equals(other);
        public static bool operator ==(MyDTO2? left, MyDTO2? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO2? left, MyDTO2? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Member1);
            result.Add(_Member2);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
