// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonSystemText;
using System;
using System.Linq;
using System.Text.Json.Serialization;
using MyOrg.Models.JsonSystemText;

namespace MyOrg.Models.JsonSystemText
{
    [JsonPolymorphic]
    [JsonDerivedType(typeof(MyDTO), 2)]
    public partial class Monoid_1_UInt128 : DTOMaker.Runtime.JsonSystemText.EntityBase, IMonoid<UInt128>, IEquatable<Monoid_1_UInt128>
    {
        // Derived entities: 1
        // - MyDTO

        protected override int OnGetEntityId() => 10046;

        private static Monoid_1_UInt128 CreateEmpty()
        {
            var empty = new Monoid_1_UInt128();
            empty.Freeze();
            return empty;
        }
        private static readonly Monoid_1_UInt128 _empty = CreateEmpty();
        public static new Monoid_1_UInt128 Empty => _empty;

        public new static Monoid_1_UInt128 CreateFrom(Monoid_1_UInt128 source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.JsonSystemText.MyDTO source2 => new MyOrg.Models.JsonSystemText.MyDTO(source2),
                _ => new MyOrg.Models.JsonSystemText.Monoid_1_UInt128(source)
            };
        }

        public new static Monoid_1_UInt128 CreateFrom(MyOrg.Models.IMonoid<UInt128> source)
        {
            if (source is Monoid_1_UInt128 concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyDTO source2 => new MyOrg.Models.JsonSystemText.MyDTO(source2),
                _ => new MyOrg.Models.JsonSystemText.Monoid_1_UInt128(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IEntityBase OnPartCopy() => new Monoid_1_UInt128(this);

        public Monoid_1_UInt128() { }
        public Monoid_1_UInt128(IMonoid<UInt128> source) : base(source)
        {
            _Value = source.Value;
        }
        public Monoid_1_UInt128(Monoid_1_UInt128 source) : base(source)
        {
            _Value = source._Value;
        }

        [JsonIgnore]
        private UInt128 _Value = default;
        public UInt128 Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(value);
        }


        public bool Equals(Monoid_1_UInt128? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Value != other.Value) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Monoid_1_UInt128 other && Equals(other);
        public static bool operator ==(Monoid_1_UInt128? left, Monoid_1_UInt128? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Monoid_1_UInt128? left, Monoid_1_UInt128? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Value);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
