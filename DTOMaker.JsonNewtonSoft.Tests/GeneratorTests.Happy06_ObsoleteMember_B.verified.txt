// <auto-generated>
// This file was generated by DTOMaker.JsonSystemText.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonSystemText
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using JsonSystemText;
using System;
using System.Runtime.CompilerServices;

namespace MyOrg.Models.JsonSystemText
{
    [CSPocoObject]
    public partial class MyDTO : IMyDTO, IEntityBase
    {
        // todo move to base
        [IgnoreMember]
        private volatile bool _frozen;
        public bool IsFrozen => _frozen;
        public IEntityBase PartCopy() => new MyDTO(this);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T IfNotFrozen<T>(ref T value, [CallerMemberName] string? methodName = null)
        {
            if (_frozen) ThrowIsFrozenException(methodName);
            return ref value;
        }

        public void Freeze()
        {
            if (_frozen) return;
            _frozen = true;
            // todo freeze base
            // todo freeze model type refs
        }

        public MyDTO() { }
        public MyDTO(IMyDTO source, bool frozen = false)
        {
            _frozen = frozen;
            // todo base ctor
            // todo freezable members
            _Field1 = source.Field1;
        }

        [IgnoreMember]
        private Double _Field1;
        [Obsolete("Removed", false)]
        [Key(1)]
        public Double Field1
        {
            get => _Field1;
            set => _Field1 = IfNotFrozen(ref value);
        }


    }
}
